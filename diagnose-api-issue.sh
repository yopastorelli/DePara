#!/bin/bash

# Script para diagnosticar problema da API que funcionava antes
# Execute este script no Raspberry Pi

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Detectar usu√°rio atual
CURRENT_USER=$(whoami)
USER_HOME="/home/$CURRENT_USER"
DEPARA_DIR="$USER_HOME/DePara"

echo -e "${BLUE}üîç Diagnosticando problema da API que funcionava antes...${NC}"

# 1. Verificar se estamos no diret√≥rio correto
echo -e "${YELLOW}üìÅ Verificando diret√≥rio atual...${NC}"
pwd

if [[ "$PWD" == *"DePara-backup"* ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è Estamos no diret√≥rio backup, vamos para o principal...${NC}"
    cd "$DEPARA_DIR" 2>/dev/null || {
        echo -e "${RED}‚ùå Diret√≥rio principal n√£o encontrado${NC}"
        exit 1
    }
fi

echo -e "${GREEN}‚úÖ Diret√≥rio: $(pwd)${NC}"

# 2. Verificar se o DePara est√° rodando
echo -e "${YELLOW}üîç Verificando se o DePara est√° rodando...${NC}"

if pgrep -f "node.*main.js" > /dev/null; then
    PID=$(pgrep -f "node.*main.js")
    echo -e "${GREEN}‚úÖ DePara est√° rodando (PID: $PID)${NC}"
else
    echo -e "${RED}‚ùå DePara n√£o est√° rodando${NC}"
fi

# 3. Verificar porta 3000
echo -e "${YELLOW}üîç Verificando porta 3000...${NC}"

if netstat -tlnp | grep -q ":3000"; then
    echo -e "${GREEN}‚úÖ Porta 3000 est√° em uso${NC}"
    netstat -tlnp | grep ":3000"
else
    echo -e "${RED}‚ùå Porta 3000 n√£o est√° em uso${NC}"
fi

# 4. Testar conectividade b√°sica
echo -e "${YELLOW}üß™ Testando conectividade b√°sica...${NC}"

# Testar se o servidor responde
if curl -s --connect-timeout 5 http://localhost:3000 > /dev/null; then
    echo -e "${GREEN}‚úÖ Servidor responde na porta 3000${NC}"
else
    echo -e "${RED}‚ùå Servidor n√£o responde na porta 3000${NC}"
fi

# 5. Testar rotas espec√≠ficas
echo -e "${YELLOW}üß™ Testando rotas espec√≠ficas...${NC}"

# Testar rota b√°sica /health
echo -e "${BLUE}üîç Testando /health...${NC}"
HEALTH_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:3000/health 2>/dev/null)
HEALTH_CODE="${HEALTH_RESPONSE: -3}"
HEALTH_BODY="${HEALTH_RESPONSE%???}"

if [ "$HEALTH_CODE" = "200" ]; then
    echo -e "${GREEN}‚úÖ /health funcionando (HTTP $HEALTH_CODE)${NC}"
    echo -e "${BLUE}üìÑ Resposta: $HEALTH_BODY${NC}"
else
    echo -e "${RED}‚ùå /health com problema (HTTP $HEALTH_CODE)${NC}"
    echo -e "${BLUE}üìÑ Resposta: $HEALTH_BODY${NC}"
fi

# Testar rota /api/health
echo -e "${BLUE}üîç Testando /api/health...${NC}"
API_HEALTH_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:3000/api/health 2>/dev/null)
API_HEALTH_CODE="${API_HEALTH_RESPONSE: -3}"
API_HEALTH_BODY="${API_HEALTH_RESPONSE%???}"

if [ "$API_HEALTH_CODE" = "200" ]; then
    echo -e "${GREEN}‚úÖ /api/health funcionando (HTTP $API_HEALTH_CODE)${NC}"
    echo -e "${BLUE}üìÑ Resposta: $API_HEALTH_BODY${NC}"
else
    echo -e "${RED}‚ùå /api/health com problema (HTTP $API_HEALTH_CODE)${NC}"
    echo -e "${BLUE}üìÑ Resposta: $API_HEALTH_BODY${NC}"
fi

# 6. Verificar logs
echo -e "${YELLOW}üìã Verificando logs...${NC}"

if [ -f "logs/app.log" ]; then
    echo -e "${BLUE}üìÑ √öltimas 20 linhas do log:${NC}"
    tail -20 logs/app.log
else
    echo -e "${YELLOW}‚ö†Ô∏è Arquivo de log n√£o encontrado${NC}"
fi

# 7. Verificar sintaxe dos arquivos
echo -e "${YELLOW}üîç Verificando sintaxe dos arquivos...${NC}"

# Verificar main.js
if node -c src/main.js 2>/dev/null; then
    echo -e "${GREEN}‚úÖ src/main.js - sintaxe OK${NC}"
else
    echo -e "${RED}‚ùå src/main.js - erro de sintaxe${NC}"
    node -c src/main.js
fi

# Verificar health.js
if node -c src/routes/health.js 2>/dev/null; then
    echo -e "${GREEN}‚úÖ src/routes/health.js - sintaxe OK${NC}"
else
    echo -e "${RED}‚ùå src/routes/health.js - erro de sintaxe${NC}"
    node -c src/routes/health.js
fi

# Verificar index.js das rotas
if node -c src/routes/index.js 2>/dev/null; then
    echo -e "${GREEN}‚úÖ src/routes/index.js - sintaxe OK${NC}"
else
    echo -e "${RED}‚ùå src/routes/index.js - erro de sintaxe${NC}"
    node -c src/routes/index.js
fi

# 8. Verificar depend√™ncias
echo -e "${YELLOW}üì¶ Verificando depend√™ncias...${NC}"

if [ -d "node_modules" ]; then
    echo -e "${GREEN}‚úÖ node_modules existe${NC}"
    
    # Verificar depend√™ncias principais
    if [ -d "node_modules/express" ]; then
        echo -e "${GREEN}‚úÖ Express instalado${NC}"
    else
        echo -e "${RED}‚ùå Express n√£o encontrado${NC}"
    fi
else
    echo -e "${RED}‚ùå node_modules n√£o encontrado${NC}"
fi

# 9. Tentar reiniciar se necess√°rio
if [ "$HEALTH_CODE" != "200" ] && [ "$API_HEALTH_CODE" != "200" ]; then
    echo -e "${YELLOW}üîÑ Tentando reiniciar DePara...${NC}"
    
    # Parar DePara
    if pgrep -f "node.*main.js" > /dev/null; then
        pkill -f "node.*main.js"
        sleep 3
        echo -e "${GREEN}‚úÖ DePara parado${NC}"
    fi
    
    # Iniciar DePara
    nohup npm start > /dev/null 2>&1 &
    sleep 5
    
    # Verificar se iniciou
    if pgrep -f "node.*main.js" > /dev/null; then
        echo -e "${GREEN}‚úÖ DePara reiniciado${NC}"
        
        # Aguardar e testar novamente
        sleep 3
        
        echo -e "${YELLOW}üß™ Testando ap√≥s reinicializa√ß√£o...${NC}"
        
        NEW_HEALTH_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:3000/health 2>/dev/null)
        NEW_HEALTH_CODE="${NEW_HEALTH_RESPONSE: -3}"
        
        if [ "$NEW_HEALTH_CODE" = "200" ]; then
            echo -e "${GREEN}‚úÖ API funcionando ap√≥s reinicializa√ß√£o${NC}"
        else
            echo -e "${RED}‚ùå API ainda com problema ap√≥s reinicializa√ß√£o${NC}"
        fi
    else
        echo -e "${RED}‚ùå Erro ao reiniciar DePara${NC}"
    fi
fi

# 10. Resumo final
echo -e "${BLUE}üìä Resumo do diagn√≥stico:${NC}"

if [ "$HEALTH_CODE" = "200" ] || [ "$API_HEALTH_CODE" = "200" ]; then
    echo -e "${GREEN}‚úÖ API funcionando corretamente${NC}"
    echo -e "${BLUE}üåê Acesse: http://localhost:3000${NC}"
else
    echo -e "${RED}‚ùå API com problemas${NC}"
    echo -e "${YELLOW}üí° Verifique os logs e depend√™ncias${NC}"
fi

echo -e "${GREEN}üéâ Diagn√≥stico conclu√≠do!${NC}"

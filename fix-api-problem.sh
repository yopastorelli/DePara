#!/bin/bash

# Script para diagnosticar e corrigir problema da API
# Execute este script no Raspberry Pi

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Detectar usu√°rio atual
CURRENT_USER=$(whoami)
USER_HOME="/home/$CURRENT_USER"
DEPARA_DIR="$USER_HOME/DePara"

echo -e "${BLUE}üîß Diagnosticando e corrigindo problema da API...${NC}"

# 1. Navegar para o diret√≥rio
cd "$DEPARA_DIR" || {
    echo -e "${RED}‚ùå Erro: N√£o foi poss√≠vel acessar $DEPARA_DIR${NC}"
    exit 1
}

# 2. Verificar se o DePara est√° rodando
echo -e "${YELLOW}üîç Verificando se o DePara est√° rodando...${NC}"

if pgrep -f "node.*main.js" > /dev/null; then
    echo -e "${GREEN}‚úÖ DePara est√° rodando${NC}"
    
    # Obter PID do processo
    PID=$(pgrep -f "node.*main.js")
    echo -e "${BLUE}üìä PID do DePara: $PID${NC}"
    
    # Verificar porta 3000
    if netstat -tlnp | grep -q ":3000"; then
        echo -e "${GREEN}‚úÖ Porta 3000 est√° em uso${NC}"
    else
        echo -e "${RED}‚ùå Porta 3000 n√£o est√° em uso${NC}"
    fi
else
    echo -e "${RED}‚ùå DePara n√£o est√° rodando${NC}"
fi

# 3. Testar API diretamente
echo -e "${YELLOW}üß™ Testando API diretamente...${NC}"

# Testar rota de health
echo -e "${BLUE}üîç Testando /api/health...${NC}"
HEALTH_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:3000/api/health 2>/dev/null)
HEALTH_CODE="${HEALTH_RESPONSE: -3}"
HEALTH_BODY="${HEALTH_RESPONSE%???}"

if [ "$HEALTH_CODE" = "200" ]; then
    echo -e "${GREEN}‚úÖ /api/health funcionando (HTTP $HEALTH_CODE)${NC}"
    echo -e "${BLUE}üìÑ Resposta: $HEALTH_BODY${NC}"
else
    echo -e "${RED}‚ùå /api/health com problema (HTTP $HEALTH_CODE)${NC}"
    echo -e "${BLUE}üìÑ Resposta: $HEALTH_BODY${NC}"
fi

# Testar rota de health b√°sica
echo -e "${BLUE}üîç Testando /health...${NC}"
BASIC_HEALTH_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:3000/health 2>/dev/null)
BASIC_HEALTH_CODE="${BASIC_HEALTH_RESPONSE: -3}"
BASIC_HEALTH_BODY="${BASIC_HEALTH_RESPONSE%???}"

if [ "$BASIC_HEALTH_CODE" = "200" ]; then
    echo -e "${GREEN}‚úÖ /health funcionando (HTTP $BASIC_HEALTH_CODE)${NC}"
    echo -e "${BLUE}üìÑ Resposta: $BASIC_HEALTH_BODY${NC}"
else
    echo -e "${RED}‚ùå /health com problema (HTTP $BASIC_HEALTH_CODE)${NC}"
    echo -e "${BLUE}üìÑ Resposta: $BASIC_HEALTH_BODY${NC}"
fi

# 4. Verificar logs do DePara
echo -e "${YELLOW}üìã Verificando logs do DePara...${NC}"

if [ -f "logs/app.log" ]; then
    echo -e "${BLUE}üìÑ √öltimas 10 linhas do log:${NC}"
    tail -10 logs/app.log
else
    echo -e "${YELLOW}‚ö†Ô∏è Arquivo de log n√£o encontrado${NC}"
fi

# 5. Verificar se h√° erros de sintaxe
echo -e "${YELLOW}üîç Verificando sintaxe dos arquivos...${NC}"

# Verificar sintaxe do main.js
if node -c src/main.js 2>/dev/null; then
    echo -e "${GREEN}‚úÖ src/main.js - sintaxe OK${NC}"
else
    echo -e "${RED}‚ùå src/main.js - erro de sintaxe${NC}"
    node -c src/main.js
fi

# Verificar sintaxe do health.js
if node -c src/routes/health.js 2>/dev/null; then
    echo -e "${GREEN}‚úÖ src/routes/health.js - sintaxe OK${NC}"
else
    echo -e "${RED}‚ùå src/routes/health.js - erro de sintaxe${NC}"
    node -c src/routes/health.js
fi

# Verificar sintaxe do index.js das rotas
if node -c src/routes/index.js 2>/dev/null; then
    echo -e "${GREEN}‚úÖ src/routes/index.js - sintaxe OK${NC}"
else
    echo -e "${RED}‚ùå src/routes/index.js - erro de sintaxe${NC}"
    node -c src/routes/index.js
fi

# 6. Reiniciar DePara se necess√°rio
if [ "$HEALTH_CODE" != "200" ] || [ "$BASIC_HEALTH_CODE" != "200" ]; then
    echo -e "${YELLOW}üîÑ Reiniciando DePara...${NC}"
    
    # Parar DePara
    if pgrep -f "node.*main.js" > /dev/null; then
        pkill -f "node.*main.js"
        sleep 3
        echo -e "${GREEN}‚úÖ DePara parado${NC}"
    fi
    
    # Iniciar DePara
    nohup npm start > /dev/null 2>&1 &
    sleep 5
    
    # Verificar se iniciou
    if pgrep -f "node.*main.js" > /dev/null; then
        echo -e "${GREEN}‚úÖ DePara reiniciado com sucesso${NC}"
        
        # Aguardar um pouco e testar novamente
        sleep 3
        
        # Testar API novamente
        echo -e "${YELLOW}üß™ Testando API ap√≥s reinicializa√ß√£o...${NC}"
        
        NEW_HEALTH_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:3000/api/health 2>/dev/null)
        NEW_HEALTH_CODE="${NEW_HEALTH_RESPONSE: -3}"
        NEW_HEALTH_BODY="${NEW_HEALTH_RESPONSE%???}"
        
        if [ "$NEW_HEALTH_CODE" = "200" ]; then
            echo -e "${GREEN}‚úÖ API funcionando ap√≥s reinicializa√ß√£o (HTTP $NEW_HEALTH_CODE)${NC}"
            echo -e "${BLUE}üìÑ Resposta: $NEW_HEALTH_BODY${NC}"
        else
            echo -e "${RED}‚ùå API ainda com problema ap√≥s reinicializa√ß√£o (HTTP $NEW_HEALTH_CODE)${NC}"
            echo -e "${BLUE}üìÑ Resposta: $NEW_HEALTH_BODY${NC}"
        fi
    else
        echo -e "${RED}‚ùå Erro ao reiniciar DePara${NC}"
    fi
fi

# 7. Verificar depend√™ncias
echo -e "${YELLOW}üì¶ Verificando depend√™ncias...${NC}"

if [ -d "node_modules" ]; then
    echo -e "${GREEN}‚úÖ node_modules existe${NC}"
    
    # Verificar se as depend√™ncias principais est√£o instaladas
    if [ -d "node_modules/express" ]; then
        echo -e "${GREEN}‚úÖ Express instalado${NC}"
    else
        echo -e "${RED}‚ùå Express n√£o encontrado${NC}"
    fi
    
    if [ -d "node_modules/cors" ]; then
        echo -e "${GREEN}‚úÖ CORS instalado${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è CORS n√£o encontrado (pode ser normal)${NC}"
    fi
    
    if [ -d "node_modules/helmet" ]; then
        echo -e "${GREEN}‚úÖ Helmet instalado${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Helmet n√£o encontrado (pode ser normal)${NC}"
    fi
else
    echo -e "${RED}‚ùå node_modules n√£o encontrado${NC}"
    echo -e "${YELLOW}üí° Execute: npm install${NC}"
fi

# 8. Resumo final
echo -e "${BLUE}üìä Resumo do diagn√≥stico:${NC}"

if [ "$HEALTH_CODE" = "200" ] || [ "$BASIC_HEALTH_CODE" = "200" ]; then
    echo -e "${GREEN}‚úÖ API funcionando corretamente${NC}"
    echo -e "${BLUE}üåê Acesse: http://localhost:3000${NC}"
    echo -e "${BLUE}üîß Interface: http://localhost:3000/ui${NC}"
else
    echo -e "${RED}‚ùå API com problemas${NC}"
    echo -e "${YELLOW}üí° Verifique os logs e depend√™ncias${NC}"
fi

echo -e "${GREEN}üéâ Diagn√≥stico conclu√≠do!${NC}"

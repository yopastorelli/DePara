#!/bin/bash

# Script para corrigir definitivamente a atualiza√ß√£o autom√°tica
# Execute este script no Raspberry Pi

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Detectar usu√°rio atual
CURRENT_USER=$(whoami)
USER_HOME="/home/$CURRENT_USER"
DEPARA_DIR="$USER_HOME/DePara"

echo -e "${BLUE}üîß Corrigindo atualiza√ß√£o autom√°tica definitivamente...${NC}"

# 1. Parar DePara se estiver rodando
echo -e "${YELLOW}‚èπÔ∏è Parando DePara...${NC}"
if pgrep -f "node.*main.js" > /dev/null; then
    pkill -f "node.*main.js"
    sleep 3
    echo -e "${GREEN}‚úÖ DePara parado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è DePara n√£o estava rodando${NC}"
fi

# 2. Navegar para o diret√≥rio
cd "$DEPARA_DIR" || {
    echo -e "${RED}‚ùå Erro: N√£o foi poss√≠vel acessar $DEPARA_DIR${NC}"
    exit 1
}

# 3. Fazer backup das mudan√ßas locais
echo -e "${YELLOW}üíæ Fazendo backup das mudan√ßas locais...${NC}"
git stash push -m "Backup antes da corre√ß√£o final da atualiza√ß√£o autom√°tica" 2>/dev/null || true

# 4. Atualizar reposit√≥rio
echo -e "${YELLOW}üì• Atualizando reposit√≥rio...${NC}"
git fetch origin
git pull origin main

# 5. Reinstalar depend√™ncias
echo -e "${YELLOW}üì¶ Reinstalando depend√™ncias...${NC}"
npm install

# 6. Corrigir problema da atualiza√ß√£o autom√°tica
echo -e "${YELLOW}üîß Corrigindo l√≥gica de atualiza√ß√£o autom√°tica...${NC}"

# Fazer backup do app.js
cp src/public/app.js src/public/app.js.backup

# Corrigir a fun√ß√£o de reinicializa√ß√£o para ser mais robusta
cat > temp_restart_fix.js << 'EOF'
async restartApplication() {
    try {
        console.log('üîÑ Reiniciando aplica√ß√£o...');
        
        // Mostrar loading
        this.showLoading('Reiniciando aplica√ß√£o...');
        
        // Fazer requisi√ß√£o para reiniciar
        const response = await fetch('/api/update/restart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`Erro HTTP: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            console.log('‚úÖ Aplica√ß√£o reiniciada com sucesso');
            this.hideLoading();
            
            // Aguardar um pouco e recarregar a p√°gina
            setTimeout(() => {
                console.log('üîÑ Recarregando p√°gina...');
                window.location.reload();
            }, 2000);
            
        } else {
            throw new Error(result.error || 'Erro desconhecido ao reiniciar');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao reiniciar aplica√ß√£o:', error);
        this.hideLoading();
        
        // Fallback: tentar recarregar a p√°gina mesmo assim
        console.log('üîÑ Tentando recarregar p√°gina como fallback...');
        setTimeout(() => {
            window.location.reload();
        }, 1000);
    }
}
EOF

# Aplicar a corre√ß√£o da fun√ß√£o restartApplication
sed -i '/async restartApplication() {/,/^}/c\
async restartApplication() {\
    try {\
        console.log("üîÑ Reiniciando aplica√ß√£o...");\
        \
        // Mostrar loading\
        this.showLoading("Reiniciando aplica√ß√£o...");\
        \
        // Fazer requisi√ß√£o para reiniciar\
        const response = await fetch("/api/update/restart", {\
            method: "POST",\
            headers: {\
                "Content-Type": "application/json"\
            }\
        });\
        \
        if (!response.ok) {\
            throw new Error(`Erro HTTP: ${response.status}`);\
        }\
        \
        const result = await response.json();\
        \
        if (result.success) {\
            console.log("‚úÖ Aplica√ß√£o reiniciada com sucesso");\
            this.hideLoading();\
            \
            // Aguardar um pouco e recarregar a p√°gina\
            setTimeout(() => {\
                console.log("üîÑ Recarregando p√°gina...");\
                window.location.reload();\
            }, 2000);\
            \
        } else {\
            throw new Error(result.error || "Erro desconhecido ao reiniciar");\
        }\
        \
    } catch (error) {\
        console.error("‚ùå Erro ao reiniciar aplica√ß√£o:", error);\
        this.hideLoading();\
        \
        // Fallback: tentar recarregar a p√°gina mesmo assim\
        console.log("üîÑ Tentando recarregar p√°gina como fallback...");\
        setTimeout(() => {\
            window.location.reload();\
        }, 1000);\
    }\
}' src/public/app.js

# 7. Corrigir a fun√ß√£o de aplica√ß√£o de atualiza√ß√µes
cat > temp_apply_fix.js << 'EOF'
async applyUpdates() {
    try {
        console.log('üîÑ Aplicando atualiza√ß√µes...');
        
        // Mostrar loading
        this.showLoading('Aplicando atualiza√ß√µes...');
        
        // Fazer requisi√ß√£o para aplicar atualiza√ß√µes
        const response = await fetch('/api/update/apply', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`Erro HTTP: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            console.log('‚úÖ Atualiza√ß√µes aplicadas com sucesso');
            this.hideLoading();
            
            // Aguardar um pouco antes de reiniciar
            setTimeout(() => {
                this.restartApplication();
            }, 1000);
            
        } else {
            throw new Error(result.error || 'Erro ao aplicar atualiza√ß√µes');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao aplicar atualiza√ß√µes:', error);
        this.hideLoading();
        this.showToast('Erro ao aplicar atualiza√ß√µes: ' + error.message, 'error');
    }
}
EOF

# Aplicar a corre√ß√£o da fun√ß√£o applyUpdates
sed -i '/async applyUpdates() {/,/^}/c\
async applyUpdates() {\
    try {\
        console.log("üîÑ Aplicando atualiza√ß√µes...");\
        \
        // Mostrar loading\
        this.showLoading("Aplicando atualiza√ß√µes...");\
        \
        // Fazer requisi√ß√£o para aplicar atualiza√ß√µes\
        const response = await fetch("/api/update/apply", {\
            method: "POST",\
            headers: {\
                "Content-Type": "application/json"\
            }\
        });\
        \
        if (!response.ok) {\
            throw new Error(`Erro HTTP: ${response.status}`);\
        }\
        \
        const result = await response.json();\
        \
        if (result.success) {\
            console.log("‚úÖ Atualiza√ß√µes aplicadas com sucesso");\
            this.hideLoading();\
            \
            // Aguardar um pouco antes de reiniciar\
            setTimeout(() => {\
                this.restartApplication();\
            }, 1000);\
            \
        } else {\
            throw new Error(result.error || "Erro ao aplicar atualiza√ß√µes");\
        }\
        \
    } catch (error) {\
        console.error("‚ùå Erro ao aplicar atualiza√ß√µes:", error);\
        this.hideLoading();\
        this.showToast("Erro ao aplicar atualiza√ß√µes: " + error.message, "error");\
    }\
}' src/public/app.js

# 8. Adicionar fun√ß√£o de fallback para quando a API n√£o responde
cat > temp_fallback_fix.js << 'EOF'
// Fun√ß√£o de fallback para quando a API n√£o responde
window.fallbackRestart = function() {
    console.log('üîÑ Executando fallback de reinicializa√ß√£o...');
    
    // Tentar recarregar a p√°gina
    setTimeout(() => {
        window.location.reload();
    }, 1000);
};

// Adicionar listener para detectar quando a API n√£o responde
setInterval(() => {
    fetch('/api/health')
        .then(response => {
            if (!response.ok) {
                throw new Error('API n√£o responde');
            }
        })
        .catch(error => {
            console.warn('‚ö†Ô∏è API n√£o responde, tentando fallback...');
            window.fallbackRestart();
        });
}, 5000);
EOF

# Adicionar fallback ao final do arquivo
echo "" >> src/public/app.js
cat temp_fallback_fix.js >> src/public/app.js

# Limpar arquivos tempor√°rios
rm -f temp_restart_fix.js temp_apply_fix.js temp_fallback_fix.js

# 9. Corrigir rota de restart no backend
echo -e "${YELLOW}üîß Corrigindo rota de restart no backend...${NC}"

# Fazer backup do update.js
cp src/routes/update.js src/routes/update.js.backup

# Corrigir a rota de restart para ser mais robusta
cat > temp_backend_fix.js << 'EOF'
// Rota para reiniciar a aplica√ß√£o
router.post('/restart', async (req, res) => {
    try {
        console.log('üîÑ Reiniciando aplica√ß√£o...');
        
        // Parar a aplica√ß√£o atual
        const stopCommand = process.platform === 'win32' 
            ? 'taskkill /F /IM node.exe'
            : 'pkill -f "node.*main.js"';
        
        // Executar comando de parada
        exec(stopCommand, (error, stdout, stderr) => {
            if (error && !error.message.includes('not found')) {
                console.warn('‚ö†Ô∏è Aviso ao parar aplica√ß√£o:', error.message);
            }
            
            // Aguardar um pouco antes de iniciar
            setTimeout(() => {
                // Comando para iniciar a aplica√ß√£o
                const startCommand = process.platform === 'win32'
                    ? 'npm start'
                    : 'nohup npm start > /dev/null 2>&1 &';
                
                // Executar comando de in√≠cio
                exec(startCommand, (error, stdout, stderr) => {
                    if (error) {
                        console.error('‚ùå Erro ao iniciar aplica√ß√£o:', error);
                        res.json({
                            success: false,
                            error: 'Erro ao reiniciar aplica√ß√£o: ' + error.message
                        });
                    } else {
                        console.log('‚úÖ Aplica√ß√£o reiniciada com sucesso');
                        res.json({
                            success: true,
                            message: 'Aplica√ß√£o reiniciada com sucesso'
                        });
                    }
                });
            }, 2000);
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao reiniciar aplica√ß√£o:', error);
        res.json({
            success: false,
            error: 'Erro interno do servidor: ' + error.message
        });
    }
});
EOF

# Aplicar corre√ß√£o no backend
sed -i '/router.post.*restart/,/^});/c\
router.post("/restart", async (req, res) => {\
    try {\
        console.log("üîÑ Reiniciando aplica√ß√£o...");\
        \
        // Parar a aplica√ß√£o atual\
        const stopCommand = process.platform === "win32" \
            ? "taskkill /F /IM node.exe"\
            : "pkill -f \"node.*main.js\"";\
        \
        // Executar comando de parada\
        exec(stopCommand, (error, stdout, stderr) => {\
            if (error && !error.message.includes("not found")) {\
                console.warn("‚ö†Ô∏è Aviso ao parar aplica√ß√£o:", error.message);\
            }\
            \
            // Aguardar um pouco antes de iniciar\
            setTimeout(() => {\
                // Comando para iniciar a aplica√ß√£o\
                const startCommand = process.platform === "win32"\
                    ? "npm start"\
                    : "nohup npm start > /dev/null 2>&1 &";\
                \
                // Executar comando de in√≠cio\
                exec(startCommand, (error, stdout, stderr) => {\
                    if (error) {\
                        console.error("‚ùå Erro ao iniciar aplica√ß√£o:", error);\
                        res.json({\
                            success: false,\
                            error: "Erro ao reiniciar aplica√ß√£o: " + error.message\
                        });\
                    } else {\
                        console.log("‚úÖ Aplica√ß√£o reiniciada com sucesso");\
                        res.json({\
                            success: true,\
                            message: "Aplica√ß√£o reiniciada com sucesso"\
                        });\
                    }\
                });\
            }, 2000);\
        });\
        \
    } catch (error) {\
        console.error("‚ùå Erro ao reiniciar aplica√ß√£o:", error);\
        res.json({\
            success: false,\
            error: "Erro interno do servidor: " + error.message\
        });\
    }\
});' src/routes/update.js

# Limpar arquivo tempor√°rio
rm -f temp_backend_fix.js

# 10. Iniciar DePara
echo -e "${YELLOW}‚ñ∂Ô∏è Iniciando DePara...${NC}"
nohup npm start > /dev/null 2>&1 &
sleep 5

# 11. Verificar se est√° rodando
if pgrep -f "node.*main.js" > /dev/null; then
    echo -e "${GREEN}‚úÖ DePara iniciado com sucesso${NC}"
else
    echo -e "${RED}‚ùå Erro ao iniciar DePara${NC}"
    echo -e "${YELLOW}üí° Tente executar manualmente: npm start${NC}"
fi

# 12. Testar API
echo -e "${YELLOW}üß™ Testando API...${NC}"
sleep 3

if curl -s http://localhost:3000/api/health | grep -q "success"; then
    echo -e "${GREEN}‚úÖ API funcionando${NC}"
else
    echo -e "${RED}‚ùå API com problemas${NC}"
fi

# 13. Resumo final
echo -e "${BLUE}üìä Resumo das corre√ß√µes:${NC}"
echo -e "${GREEN}‚úÖ Atualiza√ß√£o autom√°tica corrigida${NC}"
echo -e "${GREEN}‚úÖ Fun√ß√£o de reinicializa√ß√£o robusta${NC}"
echo -e "${GREEN}‚úÖ Fallback para quando API n√£o responde${NC}"
echo -e "${GREEN}‚úÖ Backend de restart melhorado${NC}"
echo -e "${BLUE}üåê Acesse: http://localhost:3000${NC}"
echo -e "${BLUE}üîß Para testar: V√° para Configura√ß√µes > Atualiza√ß√µes${NC}"
echo -e "${YELLOW}üí° A atualiza√ß√£o autom√°tica agora deve funcionar corretamente!${NC}"

echo -e "${GREEN}üéâ Corre√ß√µes aplicadas com sucesso!${NC}"

#!/bin/bash

# Script para resolver conflito do git e executar diagn√≥stico
# Execute este script no Raspberry Pi

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Detectar usu√°rio atual
CURRENT_USER=$(whoami)
USER_HOME="/home/$CURRENT_USER"
DEPARA_DIR="$USER_HOME/DePara"

echo -e "${BLUE}üîß Resolvendo conflito do git e executando diagn√≥stico...${NC}"

# 1. Navegar para o diret√≥rio
cd "$DEPARA_DIR" || {
    echo -e "${RED}‚ùå Erro: N√£o foi poss√≠vel acessar $DEPARA_DIR${NC}"
    exit 1
}

# 2. Resolver conflito do git
echo -e "${YELLOW}üîß Resolvendo conflito do git...${NC}"

# Fazer stash das mudan√ßas locais
echo -e "${YELLOW}üíæ Fazendo backup das mudan√ßas locais...${NC}"
git stash push -m "Backup antes da resolu√ß√£o do conflito" 2>/dev/null || true

# Atualizar reposit√≥rio
echo -e "${YELLOW}üì• Atualizando reposit√≥rio...${NC}"
git pull origin main

# 3. Executar diagn√≥stico
echo -e "${YELLOW}üîç Executando diagn√≥stico da API...${NC}"

# Verificar se o script existe
if [ -f "fix-api-problem.sh" ]; then
    chmod +x fix-api-problem.sh
    ./fix-api-problem.sh
else
    echo -e "${RED}‚ùå Script fix-api-problem.sh n√£o encontrado${NC}"
    echo -e "${YELLOW}üí° Tentando criar script de diagn√≥stico b√°sico...${NC}"
    
    # Criar script b√°sico de diagn√≥stico
    cat > diagnose-api.sh << 'EOF'
#!/bin/bash

echo "üîç Diagn√≥stico b√°sico da API DePara..."

# Verificar se DePara est√° rodando
if pgrep -f "node.*main.js" > /dev/null; then
    echo "‚úÖ DePara est√° rodando"
    PID=$(pgrep -f "node.*main.js")
    echo "üìä PID: $PID"
else
    echo "‚ùå DePara n√£o est√° rodando"
fi

# Verificar porta 3000
if netstat -tlnp | grep -q ":3000"; then
    echo "‚úÖ Porta 3000 est√° em uso"
else
    echo "‚ùå Porta 3000 n√£o est√° em uso"
fi

# Testar API
echo "üß™ Testando API..."
HEALTH_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:3000/api/health 2>/dev/null)
HEALTH_CODE="${HEALTH_RESPONSE: -3}"

if [ "$HEALTH_CODE" = "200" ]; then
    echo "‚úÖ API funcionando (HTTP $HEALTH_CODE)"
else
    echo "‚ùå API com problema (HTTP $HEALTH_CODE)"
fi

# Testar rota b√°sica
BASIC_HEALTH_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:3000/health 2>/dev/null)
BASIC_HEALTH_CODE="${BASIC_HEALTH_RESPONSE: -3}"

if [ "$BASIC_HEALTH_CODE" = "200" ]; then
    echo "‚úÖ Rota b√°sica funcionando (HTTP $BASIC_HEALTH_CODE)"
else
    echo "‚ùå Rota b√°sica com problema (HTTP $BASIC_HEALTH_CODE)"
fi

echo "üéâ Diagn√≥stico conclu√≠do!"
EOF

    chmod +x diagnose-api.sh
    ./diagnose-api.sh
fi

echo -e "${GREEN}üéâ Processo conclu√≠do!${NC}"

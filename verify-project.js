#!/usr/bin/env node

/**
 * Script de Verifica√ß√£o do Projeto DePara
 * Verifica problemas b√°sicos de sintaxe, imports e depend√™ncias
 *
 * @author yopastorelli
 * @version 1.0.0
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Verificando projeto DePara...\n');

// Verificar se arquivos principais existem
const requiredFiles = [
  'package.json',
  'src/main.js',
  'src/routes/index.js',
  'src/routes/health.js',
  'src/routes/status.js',
  'src/routes/fileOperations.js',
  'src/utils/logger.js',
  'src/utils/fileOperations.js',
  'src/middleware/errorHandler.js',
  'src/middleware/rateLimiter.js'
];

console.log('üìÅ Verificando arquivos principais...');
let filesOK = true;

for (const file of requiredFiles) {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - ARQUIVO N√ÉO ENCONTRADO`);
    filesOK = false;
  }
}

if (!filesOK) {
  console.log('\n‚ùå Alguns arquivos principais est√£o faltando!');
  process.exit(1);
}

// Verificar package.json
console.log('\nüì¶ Verificando package.json...');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  console.log(`‚úÖ Nome: ${packageJson.name}`);
  console.log(`‚úÖ Vers√£o: ${packageJson.version}`);
  console.log(`‚úÖ Node.js: ${packageJson.engines?.node || 'N√£o especificado'}`);
  console.log(`‚úÖ Depend√™ncias: ${Object.keys(packageJson.dependencies || {}).length}`);
  console.log(`‚úÖ Scripts: ${Object.keys(packageJson.scripts || {}).length}`);
} catch (error) {
  console.log(`‚ùå Erro ao ler package.json: ${error.message}`);
  process.exit(1);
}

// Verificar sintaxe dos arquivos principais
console.log('\nüîç Verificando sintaxe dos arquivos...');

const jsFiles = [
  'src/main.js',
  'src/routes/index.js',
  'src/routes/health.js',
  'src/routes/status.js',
  'src/utils/logger.js',
  'src/middleware/errorHandler.js',
  'src/middleware/rateLimiter.js'
];

let syntaxOK = true;

for (const file of jsFiles) {
  try {
    // Verificar se o arquivo pode ser lido e tem sintaxe b√°sica
    const content = fs.readFileSync(file, 'utf8');

    // Verificar se h√° erros de sintaxe b√°sicos
    if (content.includes('require(') && content.includes('module.exports')) {
      console.log(`‚úÖ ${file} - Sintaxe b√°sica OK`);
    } else {
      console.log(`‚ö†Ô∏è  ${file} - Verificar estrutura de m√≥dulos`);
    }
  } catch (error) {
    console.log(`‚ùå ${file} - Erro: ${error.message}`);
    syntaxOK = false;
  }
}

// Verificar diret√≥rios necess√°rios
console.log('\nüìÇ Verificando diret√≥rios...');

const requiredDirs = [
  'src',
  'src/routes',
  'src/utils',
  'src/middleware',
  'src/public',
  'src/config',
  'tests'
];

for (const dir of requiredDirs) {
  if (fs.existsSync(dir)) {
    console.log(`‚úÖ ${dir}/`);
  } else {
    console.log(`‚ùå ${dir}/ - DIRET√ìRIO N√ÉO ENCONTRADO`);
  }
}

// Verificar arquivos de configura√ß√£o
console.log('\n‚öôÔ∏è  Verificando arquivos de configura√ß√£o...');

const configFiles = [
  'env.example',
  'jest.config.js',
  'ecosystem.config.js'
];

for (const file of configFiles) {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ö†Ô∏è  ${file} - Arquivo opcional n√£o encontrado`);
  }
}

// Verificar arquivos de documenta√ß√£o
console.log('\nüìö Verificando documenta√ß√£o...');

const docFiles = [
  'README.md',
  'README-Raspbian.md',
  'docs/API.md'
];

for (const file of docFiles) {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ö†Ô∏è  ${file} - Documenta√ß√£o n√£o encontrada`);
  }
}

// Verificar arquivos especiais criados recentemente
console.log('\nüÜï Verificando arquivos especiais para Raspberry Pi...');

const specialFiles = [
  'INSTRUCOES-RP4.md',
  'test-rp4.sh',
  'install-raspbian.sh'
];

for (const file of specialFiles) {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ö†Ô∏è  ${file} - Arquivo especial n√£o encontrado`);
  }
}

// Resumo final
console.log('\n' + '='.repeat(50));
console.log('üìä RESUMO DA VERIFICA√á√ÉO');
console.log('='.repeat(50));

if (filesOK && syntaxOK) {
  console.log('‚úÖ Projeto parece estar em boas condi√ß√µes!');
  console.log('‚úÖ Todos os arquivos principais est√£o presentes');
  console.log('‚úÖ Sintaxe dos arquivos principais est√° OK');
  console.log('‚úÖ Estrutura de diret√≥rios est√° adequada');

  console.log('\nüöÄ Pr√≥ximos passos recomendados:');
  console.log('1. npm install (para instalar depend√™ncias)');
  console.log('2. npm test (para executar testes)');
  console.log('3. npm run dev (para desenvolvimento)');
  console.log('4. npm start (para produ√ß√£o)');

} else {
  console.log('‚ùå H√° problemas que precisam ser corrigidos:');
  if (!filesOK) console.log('   - Arquivos principais faltando');
  if (!syntaxOK) console.log('   - Problemas de sintaxe');
  console.log('\nüîß Execute: npm run lint para mais detalhes');
}

console.log('\nüçì DePara - Sistema pronto para desenvolvimento!');
console.log('=' + '='.repeat(49));
